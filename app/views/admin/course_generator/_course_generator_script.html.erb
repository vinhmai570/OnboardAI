<script>
document.addEventListener('DOMContentLoaded', function() {
  const promptTextarea = document.getElementById('course-prompt');
  const form = document.getElementById('course-prompt-form');
  const generateButton = document.getElementById('generate-button');
  const clearButton = document.getElementById('clear-prompt');
  const chatMessages = document.getElementById('chat-messages');
  const mentionDropdown = document.getElementById('mention-dropdown');
  const referencedDocs = document.getElementById('referenced-docs');

  let documents = <%= @documents.map { |doc| { id: doc.id, title: doc.title } }.to_json.html_safe %>;
  let isGenerating = false;

  // Document reference click handlers
  document.querySelectorAll('.document-reference').forEach(doc => {
    doc.addEventListener('click', function() {
      const id = this.dataset.documentId;
      const title = this.dataset.documentTitle;
      insertDocumentReference(id, title);
    });
  });

  // Clear button handler
  clearButton.addEventListener('click', function() {
    promptTextarea.value = '';
    updateReferencedDocs();
    promptTextarea.focus();
  });

  // Form submission handler
  form.addEventListener('submit', function(e) {
    e.preventDefault();

    if (isGenerating) return;

    const prompt = promptTextarea.value.trim();
    if (!prompt) {
      alert('Please enter a prompt for course generation.');
      return;
    }

    generateCourse(prompt);
  });

  // Mention dropdown functionality
  promptTextarea.addEventListener('input', function(e) {
    updateReferencedDocs();
    handleMentionTyping(e);
  });

  function insertDocumentReference(id, title) {
    const currentValue = promptTextarea.value;
    const mention = `@${id}`;

    // Check if mention already exists
    if (!currentValue.includes(mention)) {
      const newValue = currentValue + (currentValue ? ' ' : '') + mention;
      promptTextarea.value = newValue;
      updateReferencedDocs();
      promptTextarea.focus();
    }
  }

  function updateReferencedDocs() {
    const prompt = promptTextarea.value;
    const mentions = prompt.match(/@(\d+)/g) || [];

    referencedDocs.innerHTML = '';

    mentions.forEach(mention => {
      const id = mention.replace('@', '');
      const doc = documents.find(d => d.id == id);

      if (doc) {
        const badge = document.createElement('span');
        badge.className = 'inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800';
        badge.innerHTML = `üìÑ ${doc.title} <button type="button" class="ml-1 text-indigo-600 hover:text-indigo-900" onclick="removeDocumentReference('${id}')">&times;</button>`;
        referencedDocs.appendChild(badge);
      }
    });
  }

  window.removeDocumentReference = function(id) {
    const currentValue = promptTextarea.value;
    const newValue = currentValue.replace(new RegExp(`@${id}\\s*`, 'g'), '').trim();
    promptTextarea.value = newValue;
    updateReferencedDocs();
    promptTextarea.focus();
  };

  function handleMentionTyping(e) {
    const value = e.target.value;
    const cursorPos = e.target.selectionStart;
    const textBeforeCursor = value.substring(0, cursorPos);
    const lastAtIndex = textBeforeCursor.lastIndexOf('@');

    if (lastAtIndex !== -1 && (lastAtIndex === 0 || value[lastAtIndex - 1] === ' ')) {
      const searchText = textBeforeCursor.substring(lastAtIndex + 1);
      if (searchText.length >= 0 && !searchText.includes(' ')) {
        showMentionDropdown(searchText, lastAtIndex);
      } else {
        hideMentionDropdown();
      }
    } else {
      hideMentionDropdown();
    }
  }

  function showMentionDropdown(searchText, atIndex) {
    const filteredDocs = documents.filter(doc =>
      doc.title.toLowerCase().includes(searchText.toLowerCase()) ||
      doc.id.toString().includes(searchText)
    ).slice(0, 5);

    if (filteredDocs.length > 0) {
      mentionDropdown.innerHTML = filteredDocs.map(doc =>
        `<div class="p-2 hover:bg-gray-100 cursor-pointer mention-option" data-id="${doc.id}" data-title="${doc.title}">
          <div class="text-sm font-medium text-gray-900">${doc.title}</div>
          <div class="text-xs text-gray-500">ID: ${doc.id}</div>
        </div>`
      ).join('');

      mentionDropdown.classList.remove('hidden');

      // Add click handlers to mention options
      mentionDropdown.querySelectorAll('.mention-option').forEach(option => {
        option.addEventListener('click', function() {
          const id = this.dataset.id;
          const title = this.dataset.title;

          // Replace the @searchText with @id
          const currentValue = promptTextarea.value;
          const beforeAt = currentValue.substring(0, atIndex);
          const afterCursor = currentValue.substring(promptTextarea.selectionStart);

          promptTextarea.value = beforeAt + `@${id} ` + afterCursor;
          promptTextarea.focus();

          // Position cursor after the mention
          const newCursorPos = atIndex + id.length + 2; // @id + space
          promptTextarea.setSelectionRange(newCursorPos, newCursorPos);

          hideMentionDropdown();
          updateReferencedDocs();
        });
      });
    } else {
      hideMentionDropdown();
    }
  }

  function hideMentionDropdown() {
    mentionDropdown.classList.add('hidden');
  }

  function generateCourse(prompt) {
    isGenerating = true;
    generateButton.disabled = true;
    generateButton.textContent = 'Generating...';

    // Add user message to chat
    addMessageToChat('user', prompt, 'You');

    // Add loading message
    const loadingId = addMessageToChat('assistant', 'ü§ñ Analyzing your request and referenced documents...', 'AI Assistant', true);

    // Clear the prompt
    promptTextarea.value = '';
    updateReferencedDocs();

    fetch('<%= generate_admin_course_generator_index_path %>', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      },
      body: `prompt=${encodeURIComponent(prompt)}`
    })
    .then(response => response.json())
    .then(data => {
      // Remove loading message
      document.getElementById(loadingId).remove();

      if (data.success && data.course_structure) {
        displayCourseStructure(data.course_structure, data.referenced_documents, data.chunks_used);
      } else {
        addMessageToChat('assistant', `‚ùå ${data.error || 'Failed to generate course structure. Please try again.'}`, 'AI Assistant');
      }
    })
    .catch(error => {
      // Remove loading message
      document.getElementById(loadingId).remove();
      addMessageToChat('assistant', '‚ùå An error occurred while generating the course. Please try again.', 'AI Assistant');
      console.error('Course generation error:', error);
    })
    .finally(() => {
      isGenerating = false;
      generateButton.disabled = false;
      generateButton.textContent = 'Generate Course';
    });
  }

  function addMessageToChat(type, content, sender, isLoading = false) {
    const messageId = 'msg-' + Date.now() + Math.random().toString(36).substr(2, 9);
    const messageDiv = document.createElement('div');
    messageDiv.id = messageId;
    messageDiv.className = 'flex items-start space-x-3';

    const iconClass = type === 'user' ? 'bg-green-500' : 'bg-indigo-500';
    const iconSvg = type === 'user'
      ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>'
      : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>';

    messageDiv.innerHTML = `
      <div class="flex-shrink-0">
        <div class="h-8 w-8 ${iconClass} rounded-full flex items-center justify-center">
          <svg class="h-4 w-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            ${iconSvg}
          </svg>
        </div>
      </div>
      <div class="min-w-0 flex-1">
        <div class="bg-gray-100 rounded-lg p-3">
          <div class="text-sm text-gray-700">${content}</div>
        </div>
        <p class="text-xs text-gray-500 mt-1">${sender} ‚Ä¢ ${new Date().toLocaleTimeString()}</p>
      </div>
    `;

    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;

    return messageId;
  }

  function displayCourseStructure(courseStructure, referencedDocs, chunksUsed) {
    let content = `
      <div class="space-y-4">
        <div class="border-l-4 border-green-500 pl-4">
          <h3 class="text-lg font-semibold text-gray-900">${courseStructure.title || 'Generated Course'}</h3>
          <p class="text-sm text-gray-600 mt-1">${courseStructure.description || 'No description provided'}</p>
          <div class="flex flex-wrap gap-2 mt-2">
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
              ‚è±Ô∏è ${courseStructure.duration_estimate || 'Duration not specified'}
            </span>
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
              üìä ${courseStructure.difficulty_level || 'Difficulty not specified'}
            </span>
          </div>
        </div>
    `;

    if (courseStructure.objectives && courseStructure.objectives.length > 0) {
      content += `
        <div>
          <h4 class="font-medium text-gray-900 mb-2">üéØ Learning Objectives:</h4>
          <ul class="list-disc list-inside text-sm text-gray-700 space-y-1">
            ${courseStructure.objectives.map(obj => `<li>${obj}</li>`).join('')}
          </ul>
        </div>
      `;
    }

    if (courseStructure.modules && courseStructure.modules.length > 0) {
      content += `
        <div>
          <h4 class="font-medium text-gray-900 mb-2">üìö Course Modules:</h4>
          <div class="space-y-3">
      `;

      courseStructure.modules.forEach(module => {
        content += `
          <div class="border border-gray-200 rounded-lg p-3">
            <div class="flex items-center justify-between mb-2">
              <h5 class="font-medium text-gray-900">Module ${module.order}: ${module.title}</h5>
              <span class="text-xs text-gray-500">${module.duration || 'Time not specified'}</span>
            </div>
            <p class="text-sm text-gray-600 mb-2">${module.description || ''}</p>

            ${module.topics && module.topics.length > 0 ? `
              <div class="space-y-2">
                ${module.topics.map(topic => `
                  <div class="bg-gray-50 rounded p-2">
                    <div class="font-medium text-sm text-gray-800">${topic.title}</div>
                    <div class="text-xs text-gray-600 mt-1">${topic.content_overview || ''}</div>
                    ${topic.key_points && topic.key_points.length > 0 ? `
                      <ul class="list-disc list-inside text-xs text-gray-600 mt-1 ml-2">
                        ${topic.key_points.map(point => `<li>${point}</li>`).join('')}
                      </ul>
                    ` : ''}
                  </div>
                `).join('')}
              </div>
            ` : ''}
          </div>
        `;
      });

      content += '</div></div>';
    }

    if (courseStructure.assessment_suggestions && courseStructure.assessment_suggestions.length > 0) {
      content += `
        <div>
          <h4 class="font-medium text-gray-900 mb-2">üìù Assessment Suggestions:</h4>
          <div class="space-y-2">
            ${courseStructure.assessment_suggestions.map(assessment => `
              <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                <div class="flex items-center justify-between">
                  <h5 class="font-medium text-gray-900">${assessment.title}</h5>
                  <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                    ${assessment.type || 'Assessment'}
                  </span>
                </div>
                <p class="text-sm text-gray-600 mt-1">${assessment.description || ''}</p>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    }

    if (referencedDocs && referencedDocs.length > 0) {
      content += `
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
          <h4 class="font-medium text-blue-800 mb-2">üìÑ Referenced Documents:</h4>
          <div class="flex flex-wrap gap-1">
            ${referencedDocs.map(doc => `
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                ${doc.title}
              </span>
            `).join('')}
          </div>
          <p class="text-xs text-blue-600 mt-2">Used ${chunksUsed} content chunks from these documents</p>
        </div>
      `;
    }

    content += '</div>';

    addMessageToChat('assistant', content, 'AI Assistant');
  }

  // Initialize referenced docs display
  updateReferencedDocs();
});
</script>
